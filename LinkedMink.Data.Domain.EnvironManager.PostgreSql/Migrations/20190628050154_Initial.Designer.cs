// <auto-generated />
using System;
using LinkedMink.Data.Domain.EnvironManager.PostgreSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LinkedMink.Data.Domain.EnvironManager.PostgreSql.Migrations
{
    [DbContext(typeof(PostgreSqlDbContext))]
    [Migration("20190628050154_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUserToken", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LinkedMink.Data.Domain.EnvironManager.Entities.HardwareDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<int>("DeviceType");

                    b.Property<string>("Host");

                    b.Property<DateTime>("LastUpdateReceived");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDateTime");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Host");

                    b.ToTable("HardwareDevices");
                });

            modelBuilder.Entity("LinkedMink.Data.Domain.EnvironManager.Entities.LogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("HardwareDeviceId");

                    b.Property<DateTime>("RecordedOn");

                    b.Property<decimal>("RelativeHumidity")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(4, 1)");

                    b.HasKey("Id");

                    b.HasIndex("HardwareDeviceId");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientRoleClaim", b =>
                {
                    b.HasOne("LinkedMink.Data.Base.Entities.Identity.ClientRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUserClaim", b =>
                {
                    b.HasOne("LinkedMink.Data.Base.Entities.Identity.ClientUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUserLogin", b =>
                {
                    b.HasOne("LinkedMink.Data.Base.Entities.Identity.ClientUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUserRole", b =>
                {
                    b.HasOne("LinkedMink.Data.Base.Entities.Identity.ClientRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LinkedMink.Data.Base.Entities.Identity.ClientUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LinkedMink.Data.Base.Entities.Identity.ClientUserToken", b =>
                {
                    b.HasOne("LinkedMink.Data.Base.Entities.Identity.ClientUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LinkedMink.Data.Domain.EnvironManager.Entities.LogEntry", b =>
                {
                    b.HasOne("LinkedMink.Data.Domain.EnvironManager.Entities.HardwareDevice", "HardwareDevice")
                        .WithMany("LogEntries")
                        .HasForeignKey("HardwareDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
